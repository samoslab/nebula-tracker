syntax = "proto3";
package metadata.pb;

service MatadataService {

    rpc GetPublicKey(GetPublicKeyReq) returns (GetPublicKeyResp){}

    rpc MkFolder(MkFolderReq)returns(MkFolderResp){}

    rpc CheckFileExist(CheckFileExistReq)returns(CheckFileExistResp){}

    rpc UploadFilePrepare(UploadFilePrepareReq) returns (UploadFilePrepareResp){}// only use for Erasure Code store type

    rpc UploadFileDone(UploadFileDoneReq) returns (UploadFileDoneResp){}

    rpc ListFiles(ListFilesReq) returns (ListFilesResp){}

    rpc RetrieveFile(RetrieveFileReq) returns (RetrieveFileResp){}

    rpc Remove(RemoveReq) returns (RemoveResp){}

    rpc Move(MoveReq) returns (MoveResp){}

}

message GetPublicKeyReq {
    uint32 version =1;
}

message GetPublicKeyResp {
    bytes publicKey=1;
    bytes publicKeyHash=2;
}

message MkFolderReq{
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    FilePath parent=4;
    repeated string folder=5;
    bool interactive=6;
    bytes sign=7;
}

message FilePath{
    oneof oneOfPath{
        string path=1;//parent path in net disk, eg: /foloder1/folder2
        bytes id=2;//nil if top level, better performance
    }
    uint32 spaceNo=3;//0 is default space, 1 is the first private space, 2 is the second private space 
}

message MkFolderResp{
    uint32 code = 1;//0:success, 1: failed
    string errMsg=2;  
}

message CheckFileExistReq {
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    FilePath parent=4;
    bytes fileHash=5;
    uint64 fileSize=6;
    string fileType=7;
    bytes encryptKey=8;//not nil when fileData is not nil and file is cryptographic 
    bytes publicKeyHash=9;
    string fileName=10;
    uint64 fileModTime=11;
    bytes fileData=12;//file content if file size less than or equal 8k
    bool interactive=13;//if false, will auto add suffix timestamp when exists same name file
    bool newVersion=14;
    bytes sign=15;
}

message CheckFileExistResp{
    uint32 code = 1;//0:if file exists or save tiny file success; 1: please read storeType to go step 2 or step 3; 2 and more than 2 are kinds of errors
    string errMsg=2;
    FileStoreType storeType=3; // suggest store type, ErasureCode or MultiReplica
    uint32 dataPieceCount=4;  // 0 if not ErasureCode
    uint32 verifyPieceCount=5; // 0 if not ErasureCode
    uint32 replicaCount=6;  // 0 if not MultiReplica
    repeated ReplicaProvider provider=7;// if use MultiReplica, size is more than replicaCount
}

enum FileStoreType{
    ErasureCode=0;
    MultiReplica=1;
}

message ReplicaProvider{
    bytes nodeId=1;
    string server=2;
    uint32 port=3;
    uint64 timestamp=4;// use as req timestamp argument to call provider api
    string ticket=5;
    bytes auth=6;
}

message UploadFilePrepareReq{
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    bytes fileHash=4;
    uint64 fileSize=5;
    repeated SplitPartition partition=6;
    bytes sign=7;
}

message SplitPartition{
    repeated PieceHashAndSize piece=1;
}

message PieceHashAndSize{
    bytes hash=1;
    uint32 size=2;
}

message UploadFilePrepareResp{
    repeated ErasureCodePartition partition=1;
}

message ErasureCodePartition{
    repeated BlockProviderAuth providerAuth=1;
    uint64 timestamp=2;// use as req timestamp argument to call provider api 
}

message BlockProviderAuth{
    bytes nodeId=1;
    string server=2;
    uint32 port=3;
    bool spare=4;// true will  have mutiple PieceHashAuth, false have single PieceHashAuth
    repeated PieceHashAuth hashAuth=5;// spare provider have mutiple PieceHashAuth,  They are standby provider for multiple piece.
}

message PieceHashAuth{
    bytes hash=1;
    uint32 size=2;
    string ticket=3;
    bytes auth=4;
}

message UploadFileDoneReq{
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    FilePath parent=4;
    bytes fileHash=5;
    uint64 fileSize=6;
    string fileType=7;
    bytes encryptKey=8;
    bytes publicKeyHash=9;
    string fileName=10;
    uint64 fileModTime=11;
    repeated StorePartition partition=12;// size is one if use MultiReplica
    bool interactive=13;//if false, will auto add suffix timestamp when exists same name file 
    bool newVersion=14;
    bytes sign=15;
   
}

message StorePartition{
    repeated StoreBlock block=1;  //size is one if use MultiReplica
}

message StoreBlock{
    bytes hash=1;
    uint64 size=2;
    uint32 blockSeq=3;
    bool checksum=4;
    repeated bytes storeNodeId=5;
}

message UploadFileDoneResp{
    uint32 code = 1;//0:success, 1: failed
    string errMsg=2;
}

message ListFilesReq{
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    FilePath parent=4;
    uint32 pageSize=5;//can not more than 2000
    uint32 pageNum=6;// 1-based
    SortType sortType=7;
    bool ascOrder=8;
    bytes sign=9;
}

enum SortType{
    Name=0;
    ModTime=1;
    Size=2;
}

message ListFilesResp{
    uint32 code = 1;//0:success, 1: failed
    string errMsg=2;
    uint32 totalRecord=3;
    repeated FileOrFolder fof=4;
}

message FileOrFolder{
    bytes id=1;
    bool folder=2;
    string name=3;
    uint64 modTime=4;
    bytes fileHash=5;//nil if folder
    uint64 fileSize=6;//0 if folder
    string fileType=7;
}

message RetrieveFileReq{
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    bytes fileHash=4;
    uint64 fileSize=5;
    bytes sign=6;
}

message RetrieveFileResp{
    uint32 code = 1;//0:success, 1: failed
    string errMsg=2;
    bytes fileData=3;// not nil if tiny file
    string fileType=4;
    bytes encryptKey=5;
    repeated RetrievePartition partition=6;// nil if tiny file
    uint64 timestamp=7;// // use as req timestamp argument to call provider api 
}

message RetrievePartition{
    repeated RetrieveBlock block=1; 
}

message RetrieveBlock{
    bytes hash=1;
    uint64 size=2;
    uint32 blockSeq=3;
    bool checksum=4;
    repeated RetrieveNode storeNode=5;
}

message RetrieveNode{
    bytes nodeId=1;
    string server=2;
    uint32 port=3;
    string ticket=4;
    bytes auth=5;
}

message RemoveReq{
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    FilePath target=4;
    bool recursive=5;
    bytes sign=6;
}

message RemoveResp{
    uint32 code = 1;//0:success, 1: failed
    string errMsg=2;
}

message MoveReq{
    uint32 version =1;
    bytes nodeId=2;
    uint64 timestamp=3;
    FilePath source=4;
    string dest=5;
    bytes sign=9;
}

message MoveResp{
    uint32 code = 1;//0:success, 1: failed
    string errMsg=2;
}