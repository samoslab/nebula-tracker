// Code generated by protoc-gen-go. DO NOT EDIT.
// source: provider_collector.proto

/*
Package collector_provider_pb is a generated protocol buffer package.

It is generated from these files:
	provider_collector.proto

It has these top-level messages:
	CollectReq
	CollectResp
	Batch
	ActionLog
*/
package collector_provider_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CollectReq struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CollectReq) Reset()                    { *m = CollectReq{} }
func (m *CollectReq) String() string            { return proto.CompactTextString(m) }
func (*CollectReq) ProtoMessage()               {}
func (*CollectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CollectReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CollectResp struct {
}

func (m *CollectResp) Reset()                    { *m = CollectResp{} }
func (m *CollectResp) String() string            { return proto.CompactTextString(m) }
func (*CollectResp) ProtoMessage()               {}
func (*CollectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Batch struct {
	Version   uint32       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte       `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64       `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	ActionLog []*ActionLog `protobuf:"bytes,4,rep,name=actionLog" json:"actionLog,omitempty"`
	Sign      []byte       `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *Batch) Reset()                    { *m = Batch{} }
func (m *Batch) String() string            { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()               {}
func (*Batch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Batch) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Batch) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Batch) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Batch) GetActionLog() []*ActionLog {
	if m != nil {
		return m.ActionLog
	}
	return nil
}

func (m *Batch) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ActionLog struct {
	Type          uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Ticket        string `protobuf:"bytes,2,opt,name=ticket" json:"ticket,omitempty"`
	Success       bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	FileHash      []byte `protobuf:"bytes,4,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize      uint64 `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
	BlockHash     []byte `protobuf:"bytes,6,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockSize     uint64 `protobuf:"varint,7,opt,name=blockSize" json:"blockSize,omitempty"`
	BeginTime     uint64 `protobuf:"varint,8,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime       uint64 `protobuf:"varint,9,opt,name=endTime" json:"endTime,omitempty"`
	TransportSize uint64 `protobuf:"varint,10,opt,name=transportSize" json:"transportSize,omitempty"`
	Info          string `protobuf:"bytes,11,opt,name=info" json:"info,omitempty"`
	AsClient      bool   `protobuf:"varint,12,opt,name=asClient" json:"asClient,omitempty"`
}

func (m *ActionLog) Reset()                    { *m = ActionLog{} }
func (m *ActionLog) String() string            { return proto.CompactTextString(m) }
func (*ActionLog) ProtoMessage()               {}
func (*ActionLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ActionLog) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ActionLog) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *ActionLog) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ActionLog) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *ActionLog) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *ActionLog) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ActionLog) GetBlockSize() uint64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *ActionLog) GetBeginTime() uint64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *ActionLog) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ActionLog) GetTransportSize() uint64 {
	if m != nil {
		return m.TransportSize
	}
	return 0
}

func (m *ActionLog) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ActionLog) GetAsClient() bool {
	if m != nil {
		return m.AsClient
	}
	return false
}

func init() {
	proto.RegisterType((*CollectReq)(nil), "collector.provider.pb.CollectReq")
	proto.RegisterType((*CollectResp)(nil), "collector.provider.pb.CollectResp")
	proto.RegisterType((*Batch)(nil), "collector.provider.pb.Batch")
	proto.RegisterType((*ActionLog)(nil), "collector.provider.pb.ActionLog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProviderCollectorService service

type ProviderCollectorServiceClient interface {
	Collect(ctx context.Context, opts ...grpc.CallOption) (ProviderCollectorService_CollectClient, error)
}

type providerCollectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewProviderCollectorServiceClient(cc *grpc.ClientConn) ProviderCollectorServiceClient {
	return &providerCollectorServiceClient{cc}
}

func (c *providerCollectorServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (ProviderCollectorService_CollectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProviderCollectorService_serviceDesc.Streams[0], c.cc, "/collector.provider.pb.ProviderCollectorService/Collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerCollectorServiceCollectClient{stream}
	return x, nil
}

type ProviderCollectorService_CollectClient interface {
	Send(*CollectReq) error
	CloseAndRecv() (*CollectResp, error)
	grpc.ClientStream
}

type providerCollectorServiceCollectClient struct {
	grpc.ClientStream
}

func (x *providerCollectorServiceCollectClient) Send(m *CollectReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *providerCollectorServiceCollectClient) CloseAndRecv() (*CollectResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CollectResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ProviderCollectorService service

type ProviderCollectorServiceServer interface {
	Collect(ProviderCollectorService_CollectServer) error
}

func RegisterProviderCollectorServiceServer(s *grpc.Server, srv ProviderCollectorServiceServer) {
	s.RegisterService(&_ProviderCollectorService_serviceDesc, srv)
}

func _ProviderCollectorService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProviderCollectorServiceServer).Collect(&providerCollectorServiceCollectServer{stream})
}

type ProviderCollectorService_CollectServer interface {
	SendAndClose(*CollectResp) error
	Recv() (*CollectReq, error)
	grpc.ServerStream
}

type providerCollectorServiceCollectServer struct {
	grpc.ServerStream
}

func (x *providerCollectorServiceCollectServer) SendAndClose(m *CollectResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *providerCollectorServiceCollectServer) Recv() (*CollectReq, error) {
	m := new(CollectReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProviderCollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collector.provider.pb.ProviderCollectorService",
	HandlerType: (*ProviderCollectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Collect",
			Handler:       _ProviderCollectorService_Collect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "provider_collector.proto",
}

func init() { proto.RegisterFile("provider_collector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x26, 0xbb, 0xd9, 0xb6, 0x99, 0x6e, 0x2f, 0x96, 0x40, 0xd6, 0x8a, 0x43, 0x88, 0x38, 0xe4,
	0x94, 0xc3, 0x72, 0x47, 0x5a, 0x7a, 0x01, 0x89, 0x03, 0xf2, 0xee, 0x1d, 0xb9, 0xce, 0xb4, 0xb5,
	0x9a, 0xda, 0xc6, 0x36, 0x95, 0xe0, 0x95, 0x78, 0x1c, 0x5e, 0x08, 0x79, 0x9a, 0x1f, 0x2a, 0x81,
	0xf6, 0x36, 0xdf, 0xcf, 0x24, 0xdf, 0xcc, 0x18, 0xb8, 0xf3, 0xf6, 0xa4, 0x5b, 0xf4, 0x5f, 0x95,
	0xed, 0x3a, 0x54, 0xd1, 0xfa, 0xc6, 0x79, 0x1b, 0x2d, 0x7b, 0x79, 0x41, 0x90, 0xa7, 0x71, 0x9b,
	0xaa, 0x04, 0x58, 0x9f, 0x05, 0x81, 0xdf, 0x18, 0x83, 0xbc, 0x95, 0x51, 0xf2, 0xac, 0xcc, 0xea,
	0x5b, 0x41, 0x75, 0xb5, 0x82, 0xe5, 0xe8, 0x08, 0xae, 0xfa, 0x95, 0xc1, 0xcd, 0x07, 0x19, 0xd5,
	0x9e, 0x71, 0x98, 0x9f, 0xd0, 0x07, 0x6d, 0x0d, 0xf9, 0x57, 0x62, 0x80, 0xec, 0x15, 0xcc, 0x8c,
	0x6d, 0xf1, 0x53, 0xcb, 0xaf, 0xe8, 0x43, 0x3d, 0x62, 0xaf, 0xa1, 0x88, 0xfa, 0x88, 0x21, 0xca,
	0xa3, 0xe3, 0xd7, 0x65, 0x56, 0xe7, 0x62, 0x22, 0xd8, 0x7b, 0x28, 0xa4, 0x8a, 0xda, 0x9a, 0xcf,
	0x76, 0xc7, 0xf3, 0xf2, 0xba, 0x5e, 0xde, 0x97, 0xcd, 0x3f, 0x53, 0x37, 0x0f, 0x83, 0x4f, 0x4c,
	0x2d, 0x29, 0x7c, 0xd0, 0x3b, 0xc3, 0x6f, 0xce, 0xe1, 0x53, 0x5d, 0xfd, 0xbe, 0x82, 0xe2, 0xe1,
	0x6f, 0x47, 0xfc, 0xe1, 0xb0, 0x8f, 0x4b, 0x75, 0xca, 0x1a, 0xb5, 0x3a, 0x60, 0xa4, 0xac, 0x85,
	0xe8, 0x51, 0x9a, 0x2e, 0x7c, 0x57, 0x0a, 0x43, 0xa0, 0xa4, 0x0b, 0x31, 0x40, 0x76, 0x07, 0x8b,
	0xad, 0xee, 0xf0, 0xa3, 0x0c, 0x7b, 0x9e, 0xd3, 0xbf, 0x46, 0x3c, 0x68, 0x8f, 0xfa, 0x27, 0x52,
	0x8e, 0x5c, 0x8c, 0x38, 0x4d, 0xbf, 0xe9, 0xac, 0x3a, 0x50, 0xe3, 0x8c, 0x1a, 0x27, 0x62, 0x54,
	0xa9, 0x75, 0x7e, 0xde, 0xcd, 0x48, 0x90, 0x8a, 0x3b, 0x6d, 0x9e, 0xf4, 0x11, 0xf9, 0xa2, 0x57,
	0x07, 0x22, 0x65, 0x45, 0xd3, 0x92, 0x56, 0x90, 0x36, 0x40, 0xf6, 0x16, 0x56, 0xd1, 0x4b, 0x13,
	0x9c, 0xf5, 0x91, 0xbe, 0x0c, 0xa4, 0x5f, 0x92, 0x69, 0x2f, 0xda, 0x6c, 0x2d, 0x5f, 0xd2, 0x06,
	0xa8, 0x4e, 0x93, 0xc8, 0xb0, 0xee, 0x34, 0x9a, 0xc8, 0x6f, 0x69, 0x01, 0x23, 0xbe, 0x77, 0xc0,
	0xbf, 0xf4, 0xd7, 0x58, 0x0f, 0xf7, 0x79, 0x44, 0x7f, 0xd2, 0x0a, 0xd9, 0x13, 0xcc, 0x7b, 0x8e,
	0xbd, 0xf9, 0xcf, 0xf5, 0xa6, 0x07, 0x77, 0x57, 0x3d, 0x67, 0x09, 0xae, 0x7a, 0x51, 0x67, 0x9b,
	0x19, 0x3d, 0xe2, 0x77, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x36, 0x4f, 0x97, 0xe0, 0x02,
	0x00, 0x00,
}
