// Code generated by protoc-gen-go. DO NOT EDIT.
// source: provider_task.proto

/*
Package task_pb is a generated protocol buffer package.

It is generated from these files:
	provider_task.proto

It has these top-level messages:
	TaskListReq
	TaskListResp
	Task
	GetOppositeInfoReq
	GetOppositeInfoResp
	OppositeInfo
	GetProveInfoReq
	GetProveInfoResp
	FinishProveReq
	FinishProveResp
	FinishTaskReq
	FinishTaskResp
*/
package task_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskType int32

const (
	TaskType_REPLICATE TaskType = 0
	TaskType_SEND      TaskType = 1
	TaskType_REMOVE    TaskType = 2
	TaskType_PROVE     TaskType = 3
)

var TaskType_name = map[int32]string{
	0: "REPLICATE",
	1: "SEND",
	2: "REMOVE",
	3: "PROVE",
}
var TaskType_value = map[string]int32{
	"REPLICATE": 0,
	"SEND":      1,
	"REMOVE":    2,
	"PROVE":     3,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TaskListReq struct {
	NodeId    []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Category  uint32 `protobuf:"varint,3,opt,name=category" json:"category,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *TaskListReq) Reset()                    { *m = TaskListReq{} }
func (m *TaskListReq) String() string            { return proto.CompactTextString(m) }
func (*TaskListReq) ProtoMessage()               {}
func (*TaskListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TaskListReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *TaskListReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TaskListReq) GetCategory() uint32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *TaskListReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type TaskListResp struct {
	Task      []*Task `protobuf:"bytes,1,rep,name=task" json:"task,omitempty"`
	Timestamp uint64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Auth      []byte  `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (m *TaskListResp) Reset()                    { *m = TaskListResp{} }
func (m *TaskListResp) String() string            { return proto.CompactTextString(m) }
func (*TaskListResp) ProtoMessage()               {}
func (*TaskListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskListResp) GetTask() []*Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *TaskListResp) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TaskListResp) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

type Task struct {
	Id         []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creation   uint64   `protobuf:"varint,2,opt,name=creation" json:"creation,omitempty"`
	Type       TaskType `protobuf:"varint,3,opt,name=type,enum=task.pb.TaskType" json:"type,omitempty"`
	FileId     []byte   `protobuf:"bytes,4,opt,name=fileId,proto3" json:"fileId,omitempty"`
	FileHash   []byte   `protobuf:"bytes,5,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize   uint64   `protobuf:"varint,6,opt,name=fileSize" json:"fileSize,omitempty"`
	BlockHash  []byte   `protobuf:"bytes,7,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockSize  uint64   `protobuf:"varint,8,opt,name=blockSize" json:"blockSize,omitempty"`
	OppositeId []string `protobuf:"bytes,9,rep,name=oppositeId" json:"oppositeId,omitempty"`
	ProofId    []byte   `protobuf:"bytes,10,opt,name=proofId,proto3" json:"proofId,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Task) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Task) GetCreation() uint64 {
	if m != nil {
		return m.Creation
	}
	return 0
}

func (m *Task) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType_REPLICATE
}

func (m *Task) GetFileId() []byte {
	if m != nil {
		return m.FileId
	}
	return nil
}

func (m *Task) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *Task) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *Task) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *Task) GetBlockSize() uint64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *Task) GetOppositeId() []string {
	if m != nil {
		return m.OppositeId
	}
	return nil
}

func (m *Task) GetProofId() []byte {
	if m != nil {
		return m.ProofId
	}
	return nil
}

type GetOppositeInfoReq struct {
	NodeId    []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId    []byte `protobuf:"bytes,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (m *GetOppositeInfoReq) Reset()                    { *m = GetOppositeInfoReq{} }
func (m *GetOppositeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetOppositeInfoReq) ProtoMessage()               {}
func (*GetOppositeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetOppositeInfoReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *GetOppositeInfoReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetOppositeInfoReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *GetOppositeInfoReq) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

type GetOppositeInfoResp struct {
	Timestamp uint64          `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Info      []*OppositeInfo `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *GetOppositeInfoResp) Reset()                    { *m = GetOppositeInfoResp{} }
func (m *GetOppositeInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetOppositeInfoResp) ProtoMessage()               {}
func (*GetOppositeInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetOppositeInfoResp) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetOppositeInfoResp) GetInfo() []*OppositeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type OppositeInfo struct {
	NodeId string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port   uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Auth   []byte `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Ticket string `protobuf:"bytes,5,opt,name=ticket" json:"ticket,omitempty"`
}

func (m *OppositeInfo) Reset()                    { *m = OppositeInfo{} }
func (m *OppositeInfo) String() string            { return proto.CompactTextString(m) }
func (*OppositeInfo) ProtoMessage()               {}
func (*OppositeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OppositeInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *OppositeInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *OppositeInfo) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *OppositeInfo) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *OppositeInfo) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

type GetProveInfoReq struct {
	NodeId    []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId    []byte `protobuf:"bytes,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (m *GetProveInfoReq) Reset()                    { *m = GetProveInfoReq{} }
func (m *GetProveInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetProveInfoReq) ProtoMessage()               {}
func (*GetProveInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetProveInfoReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *GetProveInfoReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetProveInfoReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *GetProveInfoReq) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

type GetProveInfoResp struct {
	ProofId   []byte            `protobuf:"bytes,5,opt,name=proofId,proto3" json:"proofId,omitempty"`
	ChunkSize uint32            `protobuf:"varint,1,opt,name=chunkSize" json:"chunkSize,omitempty"`
	ChunkSeq  map[uint32][]byte `protobuf:"bytes,2,rep,name=chunkSeq" json:"chunkSeq,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetProveInfoResp) Reset()                    { *m = GetProveInfoResp{} }
func (m *GetProveInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetProveInfoResp) ProtoMessage()               {}
func (*GetProveInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetProveInfoResp) GetProofId() []byte {
	if m != nil {
		return m.ProofId
	}
	return nil
}

func (m *GetProveInfoResp) GetChunkSize() uint32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *GetProveInfoResp) GetChunkSeq() map[uint32][]byte {
	if m != nil {
		return m.ChunkSeq
	}
	return nil
}

type FinishProveReq struct {
	NodeId       []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp    uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign         []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId       []byte `protobuf:"bytes,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
	ProofId      []byte `protobuf:"bytes,5,opt,name=proofId,proto3" json:"proofId,omitempty"`
	FinishedTime uint64 `protobuf:"varint,6,opt,name=finishedTime" json:"finishedTime,omitempty"`
	Result       []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	Remark       string `protobuf:"bytes,8,opt,name=remark" json:"remark,omitempty"`
}

func (m *FinishProveReq) Reset()                    { *m = FinishProveReq{} }
func (m *FinishProveReq) String() string            { return proto.CompactTextString(m) }
func (*FinishProveReq) ProtoMessage()               {}
func (*FinishProveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FinishProveReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *FinishProveReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FinishProveReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *FinishProveReq) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *FinishProveReq) GetProofId() []byte {
	if m != nil {
		return m.ProofId
	}
	return nil
}

func (m *FinishProveReq) GetFinishedTime() uint64 {
	if m != nil {
		return m.FinishedTime
	}
	return 0
}

func (m *FinishProveReq) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *FinishProveReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type FinishProveResp struct {
}

func (m *FinishProveResp) Reset()                    { *m = FinishProveResp{} }
func (m *FinishProveResp) String() string            { return proto.CompactTextString(m) }
func (*FinishProveResp) ProtoMessage()               {}
func (*FinishProveResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type FinishTaskReq struct {
	NodeId       []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp    uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign         []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	TaskId       []byte `protobuf:"bytes,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
	FinishedTime uint64 `protobuf:"varint,5,opt,name=finishedTime" json:"finishedTime,omitempty"`
	Success      bool   `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
	Remark       string `protobuf:"bytes,7,opt,name=remark" json:"remark,omitempty"`
}

func (m *FinishTaskReq) Reset()                    { *m = FinishTaskReq{} }
func (m *FinishTaskReq) String() string            { return proto.CompactTextString(m) }
func (*FinishTaskReq) ProtoMessage()               {}
func (*FinishTaskReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FinishTaskReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *FinishTaskReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FinishTaskReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *FinishTaskReq) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *FinishTaskReq) GetFinishedTime() uint64 {
	if m != nil {
		return m.FinishedTime
	}
	return 0
}

func (m *FinishTaskReq) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *FinishTaskReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type FinishTaskResp struct {
}

func (m *FinishTaskResp) Reset()                    { *m = FinishTaskResp{} }
func (m *FinishTaskResp) String() string            { return proto.CompactTextString(m) }
func (*FinishTaskResp) ProtoMessage()               {}
func (*FinishTaskResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*TaskListReq)(nil), "task.pb.TaskListReq")
	proto.RegisterType((*TaskListResp)(nil), "task.pb.TaskListResp")
	proto.RegisterType((*Task)(nil), "task.pb.Task")
	proto.RegisterType((*GetOppositeInfoReq)(nil), "task.pb.GetOppositeInfoReq")
	proto.RegisterType((*GetOppositeInfoResp)(nil), "task.pb.GetOppositeInfoResp")
	proto.RegisterType((*OppositeInfo)(nil), "task.pb.OppositeInfo")
	proto.RegisterType((*GetProveInfoReq)(nil), "task.pb.GetProveInfoReq")
	proto.RegisterType((*GetProveInfoResp)(nil), "task.pb.GetProveInfoResp")
	proto.RegisterType((*FinishProveReq)(nil), "task.pb.FinishProveReq")
	proto.RegisterType((*FinishProveResp)(nil), "task.pb.FinishProveResp")
	proto.RegisterType((*FinishTaskReq)(nil), "task.pb.FinishTaskReq")
	proto.RegisterType((*FinishTaskResp)(nil), "task.pb.FinishTaskResp")
	proto.RegisterEnum("task.pb.TaskType", TaskType_name, TaskType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProviderTaskService service

type ProviderTaskServiceClient interface {
	TaskList(ctx context.Context, in *TaskListReq, opts ...grpc.CallOption) (*TaskListResp, error)
	GetOppositeInfo(ctx context.Context, in *GetOppositeInfoReq, opts ...grpc.CallOption) (*GetOppositeInfoResp, error)
	GetProveInfo(ctx context.Context, in *GetProveInfoReq, opts ...grpc.CallOption) (*GetProveInfoResp, error)
	FinishProve(ctx context.Context, in *FinishProveReq, opts ...grpc.CallOption) (*FinishProveResp, error)
	FinishTask(ctx context.Context, in *FinishTaskReq, opts ...grpc.CallOption) (*FinishTaskResp, error)
}

type providerTaskServiceClient struct {
	cc *grpc.ClientConn
}

func NewProviderTaskServiceClient(cc *grpc.ClientConn) ProviderTaskServiceClient {
	return &providerTaskServiceClient{cc}
}

func (c *providerTaskServiceClient) TaskList(ctx context.Context, in *TaskListReq, opts ...grpc.CallOption) (*TaskListResp, error) {
	out := new(TaskListResp)
	err := grpc.Invoke(ctx, "/task.pb.ProviderTaskService/TaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerTaskServiceClient) GetOppositeInfo(ctx context.Context, in *GetOppositeInfoReq, opts ...grpc.CallOption) (*GetOppositeInfoResp, error) {
	out := new(GetOppositeInfoResp)
	err := grpc.Invoke(ctx, "/task.pb.ProviderTaskService/GetOppositeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerTaskServiceClient) GetProveInfo(ctx context.Context, in *GetProveInfoReq, opts ...grpc.CallOption) (*GetProveInfoResp, error) {
	out := new(GetProveInfoResp)
	err := grpc.Invoke(ctx, "/task.pb.ProviderTaskService/GetProveInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerTaskServiceClient) FinishProve(ctx context.Context, in *FinishProveReq, opts ...grpc.CallOption) (*FinishProveResp, error) {
	out := new(FinishProveResp)
	err := grpc.Invoke(ctx, "/task.pb.ProviderTaskService/FinishProve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerTaskServiceClient) FinishTask(ctx context.Context, in *FinishTaskReq, opts ...grpc.CallOption) (*FinishTaskResp, error) {
	out := new(FinishTaskResp)
	err := grpc.Invoke(ctx, "/task.pb.ProviderTaskService/FinishTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProviderTaskService service

type ProviderTaskServiceServer interface {
	TaskList(context.Context, *TaskListReq) (*TaskListResp, error)
	GetOppositeInfo(context.Context, *GetOppositeInfoReq) (*GetOppositeInfoResp, error)
	GetProveInfo(context.Context, *GetProveInfoReq) (*GetProveInfoResp, error)
	FinishProve(context.Context, *FinishProveReq) (*FinishProveResp, error)
	FinishTask(context.Context, *FinishTaskReq) (*FinishTaskResp, error)
}

func RegisterProviderTaskServiceServer(s *grpc.Server, srv ProviderTaskServiceServer) {
	s.RegisterService(&_ProviderTaskService_serviceDesc, srv)
}

func _ProviderTaskService_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderTaskServiceServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.pb.ProviderTaskService/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderTaskServiceServer).TaskList(ctx, req.(*TaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderTaskService_GetOppositeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOppositeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderTaskServiceServer).GetOppositeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.pb.ProviderTaskService/GetOppositeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderTaskServiceServer).GetOppositeInfo(ctx, req.(*GetOppositeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderTaskService_GetProveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderTaskServiceServer).GetProveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.pb.ProviderTaskService/GetProveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderTaskServiceServer).GetProveInfo(ctx, req.(*GetProveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderTaskService_FinishProve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishProveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderTaskServiceServer).FinishProve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.pb.ProviderTaskService/FinishProve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderTaskServiceServer).FinishProve(ctx, req.(*FinishProveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderTaskService_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderTaskServiceServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.pb.ProviderTaskService/FinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderTaskServiceServer).FinishTask(ctx, req.(*FinishTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.pb.ProviderTaskService",
	HandlerType: (*ProviderTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskList",
			Handler:    _ProviderTaskService_TaskList_Handler,
		},
		{
			MethodName: "GetOppositeInfo",
			Handler:    _ProviderTaskService_GetOppositeInfo_Handler,
		},
		{
			MethodName: "GetProveInfo",
			Handler:    _ProviderTaskService_GetProveInfo_Handler,
		},
		{
			MethodName: "FinishProve",
			Handler:    _ProviderTaskService_FinishProve_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _ProviderTaskService_FinishTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider_task.proto",
}

func init() { proto.RegisterFile("provider_task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x29, 0xea, 0x87, 0x63, 0xc9, 0x96, 0xd7, 0x7f, 0xac, 0x6a, 0x14, 0x2a, 0x81, 0xa2,
	0x6a, 0x0f, 0x3a, 0xb8, 0x97, 0xd6, 0x3d, 0x14, 0xad, 0xab, 0x38, 0x06, 0x1c, 0x5b, 0x58, 0x0b,
	0x39, 0x26, 0xa0, 0xa9, 0x95, 0xb5, 0x90, 0xc4, 0xa5, 0xb9, 0x2b, 0x01, 0xf2, 0xcb, 0xe4, 0x71,
	0x72, 0xc9, 0x43, 0xe4, 0x01, 0xf2, 0x10, 0xc1, 0x0e, 0xff, 0x44, 0x45, 0x4e, 0x80, 0x1c, 0x7c,
	0x9b, 0x6f, 0x66, 0xf7, 0x9b, 0xfd, 0x66, 0x67, 0x96, 0x84, 0xfd, 0x30, 0x12, 0x0b, 0x3e, 0x64,
	0xd1, 0x5b, 0xe5, 0xc9, 0x49, 0x37, 0x8c, 0x84, 0x12, 0xa4, 0x1a, 0xdb, 0x77, 0xae, 0x84, 0xed,
	0x81, 0x27, 0x27, 0x57, 0x5c, 0x2a, 0xca, 0x1e, 0xc8, 0x11, 0x54, 0x02, 0x31, 0x64, 0x97, 0x43,
	0xc7, 0x68, 0x1b, 0x9d, 0x3a, 0x4d, 0x10, 0x39, 0x01, 0x5b, 0xf1, 0x19, 0x93, 0xca, 0x9b, 0x85,
	0x8e, 0xd9, 0x36, 0x3a, 0x16, 0xcd, 0x1d, 0xa4, 0x05, 0x35, 0xdf, 0x53, 0xec, 0x5e, 0x44, 0x4b,
	0xa7, 0xd4, 0x36, 0x3a, 0x0d, 0x9a, 0x61, 0x42, 0xc0, 0x92, 0xfc, 0x3e, 0x70, 0x2c, 0xe4, 0x43,
	0xdb, 0xf5, 0xa1, 0x9e, 0x27, 0x95, 0x21, 0xf9, 0x19, 0x2c, 0x7d, 0x1e, 0xc7, 0x68, 0x97, 0x3a,
	0xdb, 0xa7, 0x8d, 0x6e, 0x72, 0xb8, 0xae, 0x5e, 0x44, 0x31, 0xf4, 0x8d, 0x03, 0x10, 0xb0, 0xbc,
	0xb9, 0x1a, 0x63, 0xf2, 0x3a, 0x45, 0xdb, 0x7d, 0x67, 0x82, 0xa5, 0x09, 0xc8, 0x0e, 0x98, 0x3c,
	0xd5, 0x63, 0xf2, 0x21, 0x9e, 0x36, 0x62, 0x9e, 0xe2, 0x22, 0x48, 0x98, 0x32, 0x4c, 0x7e, 0x01,
	0x4b, 0x2d, 0x43, 0x86, 0x44, 0x3b, 0xa7, 0x7b, 0x85, 0x93, 0x0c, 0x96, 0x21, 0xa3, 0x18, 0xd6,
	0x65, 0x1a, 0xf1, 0xa9, 0x2e, 0x53, 0x2c, 0x2b, 0x41, 0x9a, 0x5a, 0x5b, 0x2f, 0x3d, 0x39, 0x76,
	0xca, 0x18, 0xc9, 0x70, 0x1a, 0xbb, 0xe5, 0x8f, 0xcc, 0xa9, 0xc4, 0x69, 0x53, 0xac, 0xd5, 0xdd,
	0x4d, 0x85, 0x3f, 0xc1, 0x8d, 0x55, 0xdc, 0x98, 0x3b, 0xb2, 0x28, 0x6e, 0xad, 0xc5, 0xda, 0x33,
	0x07, 0xf9, 0x09, 0x40, 0x84, 0xa1, 0x90, 0x5c, 0xe9, 0xf3, 0xd8, 0xed, 0x52, 0xc7, 0xa6, 0x2b,
	0x1e, 0xe2, 0x40, 0x35, 0x8c, 0x84, 0x18, 0x5d, 0x0e, 0x1d, 0x40, 0xe6, 0x14, 0xba, 0x0b, 0x20,
	0x17, 0x4c, 0xdd, 0xa4, 0x4b, 0x83, 0x91, 0xf8, 0xfe, 0x16, 0x48, 0xaf, 0xb9, 0x94, 0x5f, 0xb3,
	0x66, 0xd2, 0xf5, 0xcb, 0xab, 0x14, 0x23, 0xf7, 0x0d, 0xec, 0x7f, 0x91, 0x57, 0x86, 0xc5, 0x04,
	0xc6, 0x7a, 0x82, 0xdf, 0xc0, 0xe2, 0xc1, 0x48, 0x38, 0x26, 0xf6, 0xc8, 0x61, 0x76, 0x33, 0x05,
	0x1a, 0x5c, 0xe2, 0x3e, 0x42, 0x7d, 0xd5, 0xbb, 0xa6, 0xc8, 0xce, 0x14, 0x11, 0xb0, 0xc6, 0x42,
	0x2a, 0x14, 0x63, 0x53, 0xb4, 0xb5, 0x2f, 0x14, 0x91, 0x4a, 0xda, 0x18, 0xed, 0xac, 0xbb, 0xac,
	0xbc, 0xbb, 0x50, 0x1b, 0xf7, 0x27, 0x4c, 0xe1, 0x3d, 0xdb, 0x34, 0x41, 0xae, 0x84, 0xdd, 0x0b,
	0xa6, 0xfa, 0x91, 0x58, 0x3c, 0x63, 0x41, 0x3f, 0x18, 0xd0, 0x2c, 0x66, 0x95, 0xe1, 0xea, 0xbd,
	0x97, 0x0b, 0xf7, 0xae, 0x13, 0xfb, 0xe3, 0x79, 0x10, 0xf7, 0x93, 0x81, 0x42, 0x73, 0x07, 0x39,
	0x87, 0x5a, 0x0c, 0xd8, 0x43, 0x52, 0xec, 0x5f, 0xb3, 0x62, 0xaf, 0x27, 0xe9, 0x9e, 0x27, 0x2b,
	0x7b, 0x81, 0x8a, 0x96, 0x34, 0xdb, 0xd8, 0xfa, 0x1b, 0x1a, 0x85, 0x10, 0x69, 0x42, 0x69, 0xc2,
	0x96, 0x49, 0x36, 0x6d, 0x92, 0x03, 0x28, 0x2f, 0xbc, 0xe9, 0x9c, 0xa1, 0xf4, 0x3a, 0x8d, 0xc1,
	0x99, 0xf9, 0xa7, 0xe1, 0x7e, 0x34, 0x60, 0xe7, 0x05, 0x0f, 0xb8, 0x1c, 0x63, 0xb2, 0x67, 0xa9,
	0xe1, 0x57, 0xca, 0xe5, 0x42, 0x7d, 0x84, 0xa7, 0x61, 0xc3, 0x01, 0x9f, 0xa5, 0xc3, 0x5b, 0xf0,
	0x69, 0xd6, 0x88, 0xc9, 0xf9, 0x54, 0x25, 0xd3, 0x9b, 0xa0, 0xd8, 0x3f, 0xf3, 0xa2, 0x09, 0xce,
	0xad, 0x4d, 0x13, 0xe4, 0xee, 0xc1, 0x6e, 0x41, 0xa1, 0x0c, 0xdd, 0xf7, 0x06, 0x34, 0x62, 0x1f,
	0x3e, 0x7b, 0xcf, 0x22, 0x7a, 0x5d, 0x5a, 0x79, 0x83, 0x34, 0x07, 0xaa, 0x72, 0xee, 0xfb, 0x4c,
	0x4a, 0x54, 0x5e, 0xa3, 0x29, 0x5c, 0x11, 0x57, 0x2d, 0x88, 0x6b, 0xa6, 0xd7, 0x17, 0x0b, 0x91,
	0xe1, 0xef, 0x67, 0x50, 0x4b, 0x5f, 0x50, 0xd2, 0x00, 0x9b, 0xf6, 0xfa, 0x57, 0x97, 0xe7, 0xff,
	0x0e, 0x7a, 0xcd, 0x2d, 0x52, 0x03, 0xeb, 0xb6, 0x77, 0xfd, 0x7f, 0xd3, 0x20, 0x00, 0x15, 0xda,
	0x7b, 0x75, 0xf3, 0xba, 0xd7, 0x34, 0x89, 0x0d, 0xe5, 0x3e, 0xd5, 0x66, 0xe9, 0xf4, 0x93, 0x09,
	0xfb, 0xfd, 0xe4, 0x13, 0xa6, 0x49, 0x6e, 0x59, 0xb4, 0xe0, 0x3e, 0x23, 0x7f, 0xc5, 0x9c, 0xfa,
	0x23, 0x42, 0x0e, 0x0a, 0x0f, 0x75, 0xf2, 0x31, 0x6b, 0x1d, 0x6e, 0xf0, 0xca, 0xd0, 0xdd, 0x22,
	0xd7, 0x38, 0xa4, 0x85, 0x37, 0xe2, 0xc7, 0xd5, 0x1e, 0x5f, 0x7b, 0x12, 0x5b, 0x27, 0x4f, 0x07,
	0x91, 0xaf, 0x07, 0xf5, 0xd5, 0xc9, 0x20, 0xce, 0x13, 0x03, 0xf3, 0xd0, 0xfa, 0xe1, 0xc9, 0x51,
	0x72, 0xb7, 0xc8, 0x7f, 0xb0, 0xbd, 0xd2, 0x14, 0xe4, 0x38, 0x5b, 0x5b, 0x1c, 0x86, 0x96, 0xb3,
	0x39, 0x80, 0x1c, 0xff, 0x00, 0xe4, 0xb5, 0x27, 0x47, 0x6b, 0x2b, 0x93, 0xce, 0x6a, 0x1d, 0x6f,
	0xf4, 0x6b, 0x82, 0xbb, 0x0a, 0xfe, 0x20, 0xfc, 0xf1, 0x39, 0x00, 0x00, 0xff, 0xff, 0x23, 0x3c,
	0xf9, 0x1a, 0x37, 0x08, 0x00, 0x00,
}
