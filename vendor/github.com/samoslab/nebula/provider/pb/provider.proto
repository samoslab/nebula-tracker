syntax = "proto3";
package provider.pb;

service ProviderService {
	//no error
	rpc Ping(PingReq) returns (PingResp){}

	//codes.Unknown, "RPC Recv failed unexpectadely while reading chunks from stream, blockKey: %x error: %s"
	//codes.InvalidArgument, "check data size failed, blockKey: %x"
	//codes.Unauthenticated, "check auth failed, blockKey: %x error: %s"
	//codes.AlreadyExists, "hash point file exist, blockKey: %x"
	//codes.ResourceExhausted, "available disk space of this provider is not enlough, blockKey: %s blockSize: %d"
	//codes.Internal, "open temp write file failed, blockKey: %x error: %s"
	//codes.InvalidArgument, "transport data size exceed: %d, blockKey: %x blockSize: %d"
	//codes.Internal, "write file failed, blockKey: %x error: %s"
	//codes.Internal, "stat temp file failed, blockKey: %x error: %s"
	//codes.InvalidArgument, "check data size failed, blockKey: %x"
	//codes.Internal, "sha1 sum file %s failed, blockKey: %x error: %s"
	//codes.InvalidArgument, "hash verify failed, blockKey: %x error: %s"
	//codes.Internal, "close temp file failed, tempFilePath: %s blockKey: %x error: %s"
	//codes.Internal, "save file failed, tempFilePath: %s blockKey: %x error: %s"
	//codes.Unknown, "RPC SendAndClose failed, blockKey: %x error: %s"
	rpc Store(stream StoreReq) returns (StoreResp){}//fileSize must equal or more than 512KB

	//codes.InvalidArgument, "check data size failed, blockKey: %x"
	//codes.InvalidArgument, "check data hash failed, blockKey: %x"
	//codes.Unauthenticated, "check auth failed, blockKey: %x error: %s"
	//codes.AlreadyExists, "hash point file exist, blockKey: %x"
	//codes.ResourceExhausted, "available disk space of this provider is not enlough, blockKey: %s blockSize: %d"
	//codes.Internal, "save to small file db failed, blockKey: %x error: %s"
	//codes.Internal, "save to provider db failed, blockKey: %x error: %s"
	rpc StoreSmall(StoreReq)returns (StoreResp){}//fileSize must less than 512KB

	//codes.InvalidArgument, "check data size failed, blockKey: %x"
	//codes.Unauthenticated, "check auth failed, blockKey: %x error: %s"
	//codes.NotFound, "file not exist, blockKey: %x"
	//codes.FailedPrecondition, "is small file, blockKey: %x"
	//codes.Internal, "sha1 sum file %s failed, blockKey: %x error: %s"
	//codes.DataLoss, "hash verify failed, blockKey: %x error: %s"
	//codes.Internal, "open file failed, blockKey: %x error: %s"
	rpc Retrieve(RetrieveReq) returns (stream RetrieveResp){}//fileSize must equal or more than 512KB

	//codes.InvalidArgument, "check data size failed, blockKey: %x"
	//codes.Unauthenticated, "check auth failed, blockKey: %x error: %s"
	//codes.NotFound, "file not exist, blockKey: %x"
	//codes.FailedPrecondition, "is not small file, blockKey: %x"
	//codes.Internal, "read small file error, blockKey: %x error: %s"
	//codes.InvalidArgument, "check data size failed, read length %d != request length %d, blockKey: %x"
	//codes.DataLoss, "hash verify failed, blockKey: %x error: %s"
	rpc RetrieveSmall(RetrieveReq) returns (RetrieveResp){}//fileSize must less than 512KB

	rpc Remove(RemoveReq) returns (RemoveResp){}

	rpc GetFragment(GetFragmentReq) returns (GetFragmentResp){}

	rpc CheckAvailable(CheckAvailableReq) returns (CheckAvailableResp){}
	
}


message PingReq {
	uint32 version=1;
}

message PingResp{
	bytes nodeIdHash=1;
}

message StoreReq {
	bytes data=1;
	uint32 version=2;
	bytes auth = 3;
	uint64 timestamp=4;
	string ticket = 5;
	bytes fileKey = 6;
	uint64 fileSize=7;
	bytes blockKey=8;//nil if equals fileKey
	uint64 blockSize=9;//nil if equals fileSize
}

message StoreResp{
	bool success = 1;
}

message RetrieveReq {
	uint32 version =1;
	bytes auth = 2;
	uint64 timestamp=3;
	string ticket = 4;
	bytes fileKey = 5;
	uint64 fileSize=6;
	bytes blockKey=7;//nil if equals fileKey
	uint64 blockSize=8;//nil if equals fileSize
}

message RetrieveResp {
	bytes data=1;
}

message RemoveReq{
	uint32 version =1;
	bytes auth = 2;
	uint64 timestamp=3;
	bytes key = 4;
	uint64 size=5;
}

message RemoveResp{
	bool success = 1;
}

message GetFragmentReq {
	uint32 version =1;
	bytes auth = 2;
	uint64 timestamp=3;
	bytes key = 4;
	uint32 size = 5;
	bytes positions = 6;
}

message GetFragmentResp {
	repeated bytes data=1;
}

message CheckAvailableReq{
	uint32 version =1;
	bytes auth =2;
	uint64 timestamp=3;
}

message CheckAvailableResp{
	uint64 total=1;
	uint64 maxFileSize=2;
}