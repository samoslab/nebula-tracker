// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

/*
Package check_pb is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	FindProviderReq
	FindProviderResp
	UpdateStatusReq
	UpdateStatusResp
	Provider
	BatchProvider
	ProviderStatus
	BatchProviderStatus
*/
package check_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindProviderReq struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Locality  string `protobuf:"bytes,3,opt,name=locality" json:"locality,omitempty"`
}

func (m *FindProviderReq) Reset()                    { *m = FindProviderReq{} }
func (m *FindProviderReq) String() string            { return proto.CompactTextString(m) }
func (*FindProviderReq) ProtoMessage()               {}
func (*FindProviderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FindProviderReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FindProviderReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *FindProviderReq) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

type FindProviderResp struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FindProviderResp) Reset()                    { *m = FindProviderResp{} }
func (m *FindProviderResp) String() string            { return proto.CompactTextString(m) }
func (*FindProviderResp) ProtoMessage()               {}
func (*FindProviderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FindProviderResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateStatusReq struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Locality  string `protobuf:"bytes,3,opt,name=locality" json:"locality,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UpdateStatusReq) Reset()                    { *m = UpdateStatusReq{} }
func (m *UpdateStatusReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusReq) ProtoMessage()               {}
func (*UpdateStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateStatusReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UpdateStatusReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *UpdateStatusReq) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

func (m *UpdateStatusReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateStatusResp struct {
}

func (m *UpdateStatusResp) Reset()                    { *m = UpdateStatusResp{} }
func (m *UpdateStatusResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusResp) ProtoMessage()               {}
func (*UpdateStatusResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Provider struct {
	NodeId        string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	PublicKey     []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Port          uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Host          string `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"`
	DynamicDomain string `protobuf:"bytes,5,opt,name=dynamicDomain" json:"dynamicDomain,omitempty"`
	LastConnect   uint64 `protobuf:"varint,6,opt,name=lastConnect" json:"lastConnect,omitempty"`
}

func (m *Provider) Reset()                    { *m = Provider{} }
func (m *Provider) String() string            { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()               {}
func (*Provider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Provider) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Provider) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Provider) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Provider) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Provider) GetDynamicDomain() string {
	if m != nil {
		return m.DynamicDomain
	}
	return ""
}

func (m *Provider) GetLastConnect() uint64 {
	if m != nil {
		return m.LastConnect
	}
	return 0
}

type BatchProvider struct {
	P []*Provider `protobuf:"bytes,1,rep,name=p" json:"p,omitempty"`
}

func (m *BatchProvider) Reset()                    { *m = BatchProvider{} }
func (m *BatchProvider) String() string            { return proto.CompactTextString(m) }
func (*BatchProvider) ProtoMessage()               {}
func (*BatchProvider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BatchProvider) GetP() []*Provider {
	if m != nil {
		return m.P
	}
	return nil
}

type ProviderStatus struct {
	NodeId          string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	CheckTime       uint64 `protobuf:"varint,2,opt,name=checkTime" json:"checkTime,omitempty"`
	LatencyNs       uint64 `protobuf:"varint,3,opt,name=latencyNs" json:"latencyNs,omitempty"`
	TotalFreeVolume uint64 `protobuf:"varint,4,opt,name=totalFreeVolume" json:"totalFreeVolume,omitempty"`
	AvailFileSize   uint64 `protobuf:"varint,5,opt,name=availFileSize" json:"availFileSize,omitempty"`
	Version         uint32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
}

func (m *ProviderStatus) Reset()                    { *m = ProviderStatus{} }
func (m *ProviderStatus) String() string            { return proto.CompactTextString(m) }
func (*ProviderStatus) ProtoMessage()               {}
func (*ProviderStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProviderStatus) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ProviderStatus) GetCheckTime() uint64 {
	if m != nil {
		return m.CheckTime
	}
	return 0
}

func (m *ProviderStatus) GetLatencyNs() uint64 {
	if m != nil {
		return m.LatencyNs
	}
	return 0
}

func (m *ProviderStatus) GetTotalFreeVolume() uint64 {
	if m != nil {
		return m.TotalFreeVolume
	}
	return 0
}

func (m *ProviderStatus) GetAvailFileSize() uint64 {
	if m != nil {
		return m.AvailFileSize
	}
	return 0
}

func (m *ProviderStatus) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type BatchProviderStatus struct {
	Ps []*ProviderStatus `protobuf:"bytes,1,rep,name=ps" json:"ps,omitempty"`
}

func (m *BatchProviderStatus) Reset()                    { *m = BatchProviderStatus{} }
func (m *BatchProviderStatus) String() string            { return proto.CompactTextString(m) }
func (*BatchProviderStatus) ProtoMessage()               {}
func (*BatchProviderStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BatchProviderStatus) GetPs() []*ProviderStatus {
	if m != nil {
		return m.Ps
	}
	return nil
}

func init() {
	proto.RegisterType((*FindProviderReq)(nil), "check.pb.FindProviderReq")
	proto.RegisterType((*FindProviderResp)(nil), "check.pb.FindProviderResp")
	proto.RegisterType((*UpdateStatusReq)(nil), "check.pb.UpdateStatusReq")
	proto.RegisterType((*UpdateStatusResp)(nil), "check.pb.UpdateStatusResp")
	proto.RegisterType((*Provider)(nil), "check.pb.Provider")
	proto.RegisterType((*BatchProvider)(nil), "check.pb.BatchProvider")
	proto.RegisterType((*ProviderStatus)(nil), "check.pb.ProviderStatus")
	proto.RegisterType((*BatchProviderStatus)(nil), "check.pb.BatchProviderStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CheckAvailabilityService service

type CheckAvailabilityServiceClient interface {
	FindProvider(ctx context.Context, in *FindProviderReq, opts ...grpc.CallOption) (*FindProviderResp, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusResp, error)
}

type checkAvailabilityServiceClient struct {
	cc *grpc.ClientConn
}

func NewCheckAvailabilityServiceClient(cc *grpc.ClientConn) CheckAvailabilityServiceClient {
	return &checkAvailabilityServiceClient{cc}
}

func (c *checkAvailabilityServiceClient) FindProvider(ctx context.Context, in *FindProviderReq, opts ...grpc.CallOption) (*FindProviderResp, error) {
	out := new(FindProviderResp)
	err := grpc.Invoke(ctx, "/check.pb.CheckAvailabilityService/FindProvider", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkAvailabilityServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusResp, error) {
	out := new(UpdateStatusResp)
	err := grpc.Invoke(ctx, "/check.pb.CheckAvailabilityService/UpdateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckAvailabilityService service

type CheckAvailabilityServiceServer interface {
	FindProvider(context.Context, *FindProviderReq) (*FindProviderResp, error)
	UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateStatusResp, error)
}

func RegisterCheckAvailabilityServiceServer(s *grpc.Server, srv CheckAvailabilityServiceServer) {
	s.RegisterService(&_CheckAvailabilityService_serviceDesc, srv)
}

func _CheckAvailabilityService_FindProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckAvailabilityServiceServer).FindProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/check.pb.CheckAvailabilityService/FindProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckAvailabilityServiceServer).FindProvider(ctx, req.(*FindProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckAvailabilityService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckAvailabilityServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/check.pb.CheckAvailabilityService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckAvailabilityServiceServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckAvailabilityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "check.pb.CheckAvailabilityService",
	HandlerType: (*CheckAvailabilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindProvider",
			Handler:    _CheckAvailabilityService_FindProvider_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _CheckAvailabilityService_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x5d, 0x8b, 0x13, 0x31,
	0x14, 0xdd, 0x74, 0xc7, 0xda, 0xde, 0x6e, 0xed, 0x12, 0x41, 0xc6, 0xe2, 0xc3, 0x30, 0x88, 0xcc,
	0x53, 0xc1, 0xf5, 0x07, 0x88, 0xae, 0x54, 0x44, 0x10, 0x49, 0xd5, 0x57, 0x49, 0x33, 0x17, 0x1a,
	0xcc, 0x4c, 0xe2, 0x24, 0x2d, 0xd4, 0xdf, 0xe4, 0x83, 0xbf, 0xc4, 0xdf, 0x24, 0x89, 0xf3, 0xd9,
	0xa2, 0x4f, 0xfb, 0x76, 0xef, 0xb9, 0x70, 0xce, 0xb9, 0x27, 0x37, 0x30, 0x2b, 0x74, 0x8e, 0x6a,
	0x65, 0x2a, 0xed, 0x34, 0x9d, 0x88, 0x1d, 0x8a, 0x6f, 0x2b, 0xb3, 0x4d, 0xbf, 0xc2, 0x62, 0x2d,
	0xcb, 0xfc, 0x63, 0xa5, 0x0f, 0x32, 0xc7, 0x8a, 0xe1, 0x77, 0xfa, 0x04, 0xa6, 0x4e, 0x16, 0x68,
	0x1d, 0x2f, 0x4c, 0x4c, 0x12, 0x92, 0x45, 0xac, 0x03, 0x28, 0x85, 0x88, 0xef, 0xdd, 0x2e, 0x1e,
	0x25, 0x24, 0xbb, 0x62, 0xa1, 0xa6, 0x4b, 0x98, 0x28, 0x2d, 0xb8, 0x92, 0xee, 0x18, 0x5f, 0x26,
	0x24, 0x9b, 0xb2, 0xb6, 0x4f, 0x9f, 0xc1, 0xf5, 0x50, 0xc0, 0x06, 0x8e, 0x9c, 0x3b, 0xde, 0x70,
	0xf8, 0x3a, 0xb5, 0xb0, 0xf8, 0x6c, 0x72, 0xee, 0x70, 0xe3, 0xb8, 0xdb, 0xdb, 0x3b, 0x37, 0xd2,
	0x8a, 0x46, 0x3d, 0x51, 0x0a, 0xd7, 0x43, 0x51, 0x6b, 0xd2, 0x5f, 0x04, 0x26, 0x8d, 0x5b, 0xfa,
	0x08, 0xc6, 0xa5, 0xce, 0xf1, 0x5d, 0x1e, 0xf4, 0xa7, 0xac, 0xee, 0xbc, 0x35, 0xb3, 0xdf, 0x2a,
	0x29, 0xde, 0xe3, 0xb1, 0x76, 0xd0, 0x01, 0x5e, 0xca, 0xe8, 0xca, 0x05, 0x0b, 0x73, 0x16, 0x6a,
	0x8f, 0xed, 0xb4, 0x75, 0x41, 0x7e, 0xca, 0x42, 0x4d, 0x9f, 0xc2, 0x3c, 0x3f, 0x96, 0xbc, 0x90,
	0xe2, 0x8d, 0x2e, 0xb8, 0x2c, 0xe3, 0x7b, 0x61, 0x38, 0x04, 0x69, 0x02, 0x33, 0xc5, 0xad, 0xbb,
	0xd5, 0x65, 0x89, 0xc2, 0xc5, 0xe3, 0x10, 0x44, 0x1f, 0x4a, 0x9f, 0xc3, 0xfc, 0x35, 0x77, 0x62,
	0xd7, 0xda, 0x4e, 0x80, 0xf8, 0xc4, 0x2e, 0xb3, 0xd9, 0x0d, 0x5d, 0x35, 0x6f, 0xbd, 0x6a, 0xdf,
	0x80, 0x98, 0xf4, 0x37, 0x81, 0x07, 0x4d, 0xff, 0x77, 0xf9, 0xff, 0xed, 0x1a, 0x28, 0x3e, 0xc9,
	0x02, 0xc3, 0xae, 0x11, 0xeb, 0x00, 0x3f, 0x55, 0xdc, 0x61, 0x29, 0x8e, 0x1f, 0x6c, 0x58, 0x38,
	0x62, 0x1d, 0x40, 0x33, 0x58, 0x38, 0xed, 0xb8, 0x5a, 0x57, 0x88, 0x5f, 0xb4, 0xda, 0x17, 0x18,
	0x02, 0x88, 0xd8, 0x29, 0xec, 0xb3, 0xe0, 0x07, 0x2e, 0xd5, 0x5a, 0x2a, 0xdc, 0xc8, 0x1f, 0x18,
	0xb2, 0x88, 0xd8, 0x10, 0xa4, 0x31, 0xdc, 0x3f, 0x60, 0x65, 0xa5, 0x2e, 0x43, 0x0e, 0x73, 0xd6,
	0xb4, 0xe9, 0x4b, 0x78, 0x38, 0xc8, 0xa0, 0x5e, 0x2a, 0x83, 0x91, 0xb1, 0x75, 0x14, 0xf1, 0x79,
	0x14, 0xf5, 0xbb, 0x8f, 0x8c, 0xbd, 0xf9, 0x49, 0x20, 0xbe, 0xf5, 0xf3, 0x57, 0x5e, 0x91, 0x6f,
	0xa5, 0xbf, 0x9a, 0x0d, 0x56, 0x07, 0x29, 0x90, 0xbe, 0x85, 0xab, 0xfe, 0x15, 0xd3, 0xc7, 0x1d,
	0xd5, 0xc9, 0xf7, 0x59, 0x2e, 0xff, 0x35, 0xb2, 0x26, 0xbd, 0xf0, 0x44, 0xfd, 0x8b, 0xeb, 0x13,
	0x9d, 0x9c, 0x7f, 0x9f, 0xe8, 0xec, 0x48, 0x2f, 0xb6, 0xe3, 0xf0, 0x93, 0x5f, 0xfc, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x80, 0x36, 0xa8, 0x0f, 0xd8, 0x03, 0x00, 0x00,
}
