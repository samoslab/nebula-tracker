// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package forcollector_pb is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ClientPubKeyReq
	ClientPubKeyResp
	ProviderPubKeyReq
	ProviderPubKeyResp
	HourlyUpdateReq
	HourlyUpdateResp
	ClientItem
	ProviderItem
	HourlySummary
	NextAnalysisStartReq
	NextAnalysisStartResp
*/
package forcollector_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientPubKeyReq struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	NodeId    string `protobuf:"bytes,3,opt,name=nodeId" json:"nodeId,omitempty"`
}

func (m *ClientPubKeyReq) Reset()                    { *m = ClientPubKeyReq{} }
func (m *ClientPubKeyReq) String() string            { return proto.CompactTextString(m) }
func (*ClientPubKeyReq) ProtoMessage()               {}
func (*ClientPubKeyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClientPubKeyReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ClientPubKeyReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ClientPubKeyReq) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type ClientPubKeyResp struct {
	PubKeyEnc []byte `protobuf:"bytes,1,opt,name=pubKeyEnc,proto3" json:"pubKeyEnc,omitempty"`
}

func (m *ClientPubKeyResp) Reset()                    { *m = ClientPubKeyResp{} }
func (m *ClientPubKeyResp) String() string            { return proto.CompactTextString(m) }
func (*ClientPubKeyResp) ProtoMessage()               {}
func (*ClientPubKeyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClientPubKeyResp) GetPubKeyEnc() []byte {
	if m != nil {
		return m.PubKeyEnc
	}
	return nil
}

type ProviderPubKeyReq struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	NodeId    string `protobuf:"bytes,3,opt,name=nodeId" json:"nodeId,omitempty"`
}

func (m *ProviderPubKeyReq) Reset()                    { *m = ProviderPubKeyReq{} }
func (m *ProviderPubKeyReq) String() string            { return proto.CompactTextString(m) }
func (*ProviderPubKeyReq) ProtoMessage()               {}
func (*ProviderPubKeyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProviderPubKeyReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ProviderPubKeyReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ProviderPubKeyReq) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type ProviderPubKeyResp struct {
	PubKeyEnc []byte `protobuf:"bytes,1,opt,name=pubKeyEnc,proto3" json:"pubKeyEnc,omitempty"`
}

func (m *ProviderPubKeyResp) Reset()                    { *m = ProviderPubKeyResp{} }
func (m *ProviderPubKeyResp) String() string            { return proto.CompactTextString(m) }
func (*ProviderPubKeyResp) ProtoMessage()               {}
func (*ProviderPubKeyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProviderPubKeyResp) GetPubKeyEnc() []byte {
	if m != nil {
		return m.PubKeyEnc
	}
	return nil
}

type HourlyUpdateReq struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *HourlyUpdateReq) Reset()                    { *m = HourlyUpdateReq{} }
func (m *HourlyUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*HourlyUpdateReq) ProtoMessage()               {}
func (*HourlyUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HourlyUpdateReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HourlyUpdateReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *HourlyUpdateReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type HourlyUpdateResp struct {
}

func (m *HourlyUpdateResp) Reset()                    { *m = HourlyUpdateResp{} }
func (m *HourlyUpdateResp) String() string            { return proto.CompactTextString(m) }
func (*HourlyUpdateResp) ProtoMessage()               {}
func (*HourlyUpdateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ClientItem struct {
	Upstream bool   `protobuf:"varint,1,opt,name=upstream" json:"upstream,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=nodeId" json:"nodeId,omitempty"`
	Day      string `protobuf:"bytes,3,opt,name=day" json:"day,omitempty"`
	Hour     uint32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Netflow  uint64 `protobuf:"varint,5,opt,name=netflow" json:"netflow,omitempty"`
}

func (m *ClientItem) Reset()                    { *m = ClientItem{} }
func (m *ClientItem) String() string            { return proto.CompactTextString(m) }
func (*ClientItem) ProtoMessage()               {}
func (*ClientItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClientItem) GetUpstream() bool {
	if m != nil {
		return m.Upstream
	}
	return false
}

func (m *ClientItem) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ClientItem) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *ClientItem) GetHour() uint32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *ClientItem) GetNetflow() uint64 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

type ProviderItem struct {
	Type    int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	NodeId  string `protobuf:"bytes,2,opt,name=nodeId" json:"nodeId,omitempty"`
	Day     string `protobuf:"bytes,3,opt,name=day" json:"day,omitempty"`
	Netflow uint64 `protobuf:"varint,4,opt,name=netflow" json:"netflow,omitempty"`
}

func (m *ProviderItem) Reset()                    { *m = ProviderItem{} }
func (m *ProviderItem) String() string            { return proto.CompactTextString(m) }
func (*ProviderItem) ProtoMessage()               {}
func (*ProviderItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProviderItem) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ProviderItem) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ProviderItem) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *ProviderItem) GetNetflow() uint64 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

type HourlySummary struct {
	Start        int64           `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	NextStart    int64           `protobuf:"varint,2,opt,name=nextStart" json:"nextStart,omitempty"`
	ClientItem   []*ClientItem   `protobuf:"bytes,3,rep,name=clientItem" json:"clientItem,omitempty"`
	ProviderItem []*ProviderItem `protobuf:"bytes,4,rep,name=providerItem" json:"providerItem,omitempty"`
}

func (m *HourlySummary) Reset()                    { *m = HourlySummary{} }
func (m *HourlySummary) String() string            { return proto.CompactTextString(m) }
func (*HourlySummary) ProtoMessage()               {}
func (*HourlySummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HourlySummary) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *HourlySummary) GetNextStart() int64 {
	if m != nil {
		return m.NextStart
	}
	return 0
}

func (m *HourlySummary) GetClientItem() []*ClientItem {
	if m != nil {
		return m.ClientItem
	}
	return nil
}

func (m *HourlySummary) GetProviderItem() []*ProviderItem {
	if m != nil {
		return m.ProviderItem
	}
	return nil
}

type NextAnalysisStartReq struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (m *NextAnalysisStartReq) Reset()                    { *m = NextAnalysisStartReq{} }
func (m *NextAnalysisStartReq) String() string            { return proto.CompactTextString(m) }
func (*NextAnalysisStartReq) ProtoMessage()               {}
func (*NextAnalysisStartReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NextAnalysisStartReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *NextAnalysisStartReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

type NextAnalysisStartResp struct {
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
}

func (m *NextAnalysisStartResp) Reset()                    { *m = NextAnalysisStartResp{} }
func (m *NextAnalysisStartResp) String() string            { return proto.CompactTextString(m) }
func (*NextAnalysisStartResp) ProtoMessage()               {}
func (*NextAnalysisStartResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NextAnalysisStartResp) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func init() {
	proto.RegisterType((*ClientPubKeyReq)(nil), "forcollector.pb.ClientPubKeyReq")
	proto.RegisterType((*ClientPubKeyResp)(nil), "forcollector.pb.ClientPubKeyResp")
	proto.RegisterType((*ProviderPubKeyReq)(nil), "forcollector.pb.ProviderPubKeyReq")
	proto.RegisterType((*ProviderPubKeyResp)(nil), "forcollector.pb.ProviderPubKeyResp")
	proto.RegisterType((*HourlyUpdateReq)(nil), "forcollector.pb.HourlyUpdateReq")
	proto.RegisterType((*HourlyUpdateResp)(nil), "forcollector.pb.HourlyUpdateResp")
	proto.RegisterType((*ClientItem)(nil), "forcollector.pb.ClientItem")
	proto.RegisterType((*ProviderItem)(nil), "forcollector.pb.ProviderItem")
	proto.RegisterType((*HourlySummary)(nil), "forcollector.pb.HourlySummary")
	proto.RegisterType((*NextAnalysisStartReq)(nil), "forcollector.pb.NextAnalysisStartReq")
	proto.RegisterType((*NextAnalysisStartResp)(nil), "forcollector.pb.NextAnalysisStartResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ForCollectorService service

type ForCollectorServiceClient interface {
	ClientPubKey(ctx context.Context, in *ClientPubKeyReq, opts ...grpc.CallOption) (*ClientPubKeyResp, error)
	ProviderPubKey(ctx context.Context, in *ProviderPubKeyReq, opts ...grpc.CallOption) (*ProviderPubKeyResp, error)
	HourlyUpdate(ctx context.Context, in *HourlyUpdateReq, opts ...grpc.CallOption) (*HourlyUpdateResp, error)
	NextAnalysisStart(ctx context.Context, in *NextAnalysisStartReq, opts ...grpc.CallOption) (*NextAnalysisStartResp, error)
}

type forCollectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewForCollectorServiceClient(cc *grpc.ClientConn) ForCollectorServiceClient {
	return &forCollectorServiceClient{cc}
}

func (c *forCollectorServiceClient) ClientPubKey(ctx context.Context, in *ClientPubKeyReq, opts ...grpc.CallOption) (*ClientPubKeyResp, error) {
	out := new(ClientPubKeyResp)
	err := grpc.Invoke(ctx, "/forcollector.pb.ForCollectorService/ClientPubKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forCollectorServiceClient) ProviderPubKey(ctx context.Context, in *ProviderPubKeyReq, opts ...grpc.CallOption) (*ProviderPubKeyResp, error) {
	out := new(ProviderPubKeyResp)
	err := grpc.Invoke(ctx, "/forcollector.pb.ForCollectorService/ProviderPubKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forCollectorServiceClient) HourlyUpdate(ctx context.Context, in *HourlyUpdateReq, opts ...grpc.CallOption) (*HourlyUpdateResp, error) {
	out := new(HourlyUpdateResp)
	err := grpc.Invoke(ctx, "/forcollector.pb.ForCollectorService/HourlyUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forCollectorServiceClient) NextAnalysisStart(ctx context.Context, in *NextAnalysisStartReq, opts ...grpc.CallOption) (*NextAnalysisStartResp, error) {
	out := new(NextAnalysisStartResp)
	err := grpc.Invoke(ctx, "/forcollector.pb.ForCollectorService/NextAnalysisStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ForCollectorService service

type ForCollectorServiceServer interface {
	ClientPubKey(context.Context, *ClientPubKeyReq) (*ClientPubKeyResp, error)
	ProviderPubKey(context.Context, *ProviderPubKeyReq) (*ProviderPubKeyResp, error)
	HourlyUpdate(context.Context, *HourlyUpdateReq) (*HourlyUpdateResp, error)
	NextAnalysisStart(context.Context, *NextAnalysisStartReq) (*NextAnalysisStartResp, error)
}

func RegisterForCollectorServiceServer(s *grpc.Server, srv ForCollectorServiceServer) {
	s.RegisterService(&_ForCollectorService_serviceDesc, srv)
}

func _ForCollectorService_ClientPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPubKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForCollectorServiceServer).ClientPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forcollector.pb.ForCollectorService/ClientPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForCollectorServiceServer).ClientPubKey(ctx, req.(*ClientPubKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForCollectorService_ProviderPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderPubKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForCollectorServiceServer).ProviderPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forcollector.pb.ForCollectorService/ProviderPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForCollectorServiceServer).ProviderPubKey(ctx, req.(*ProviderPubKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForCollectorService_HourlyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HourlyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForCollectorServiceServer).HourlyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forcollector.pb.ForCollectorService/HourlyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForCollectorServiceServer).HourlyUpdate(ctx, req.(*HourlyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForCollectorService_NextAnalysisStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextAnalysisStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForCollectorServiceServer).NextAnalysisStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forcollector.pb.ForCollectorService/NextAnalysisStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForCollectorServiceServer).NextAnalysisStart(ctx, req.(*NextAnalysisStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForCollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "forcollector.pb.ForCollectorService",
	HandlerType: (*ForCollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientPubKey",
			Handler:    _ForCollectorService_ClientPubKey_Handler,
		},
		{
			MethodName: "ProviderPubKey",
			Handler:    _ForCollectorService_ProviderPubKey_Handler,
		},
		{
			MethodName: "HourlyUpdate",
			Handler:    _ForCollectorService_HourlyUpdate_Handler,
		},
		{
			MethodName: "NextAnalysisStart",
			Handler:    _ForCollectorService_NextAnalysisStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x63, 0xa7, 0x34, 0x83, 0x4b, 0xd2, 0xa1, 0x20, 0x2b, 0x80, 0x64, 0x16, 0x81, 0x72,
	0x21, 0x42, 0xe1, 0xc8, 0xa9, 0xaa, 0x40, 0xad, 0x90, 0x50, 0xb5, 0x51, 0xc4, 0xa1, 0xe2, 0xb0,
	0xb1, 0x37, 0xaa, 0x25, 0xdb, 0xbb, 0xac, 0xd7, 0xa5, 0xbe, 0x71, 0xe2, 0xc7, 0xf8, 0x31, 0xe4,
	0x4d, 0x13, 0xdb, 0x89, 0xab, 0x40, 0x25, 0x6e, 0x33, 0xbb, 0x33, 0xef, 0xbd, 0x79, 0xde, 0x31,
	0xf4, 0x98, 0x8c, 0xc6, 0x52, 0x09, 0x2d, 0xb0, 0xbf, 0x10, 0x2a, 0x10, 0x71, 0xcc, 0x03, 0x2d,
	0xd4, 0x58, 0xce, 0xc9, 0x25, 0xf4, 0x4f, 0xe3, 0x88, 0xa7, 0xfa, 0x22, 0x9f, 0x7f, 0xe6, 0x05,
	0xe5, 0xdf, 0xf1, 0x39, 0xf4, 0x74, 0x94, 0xf0, 0x4c, 0xb3, 0x44, 0x7a, 0x96, 0x6f, 0x8d, 0x1c,
	0x5a, 0x1d, 0x20, 0x82, 0xc3, 0x72, 0x7d, 0xe5, 0x75, 0x7c, 0x6b, 0xe4, 0x52, 0x13, 0xe3, 0x53,
	0xd8, 0x4f, 0x45, 0xc8, 0xcf, 0x43, 0xcf, 0xf6, 0xad, 0x51, 0x8f, 0xde, 0x66, 0xe4, 0x1d, 0x0c,
	0x9a, 0xe0, 0x99, 0x2c, 0xd1, 0xa5, 0xc9, 0x3e, 0xa6, 0x81, 0x41, 0x77, 0x69, 0x75, 0x40, 0xbe,
	0xc1, 0xd1, 0x85, 0x12, 0xd7, 0x51, 0xc8, 0xd5, 0xff, 0x10, 0x34, 0x01, 0xdc, 0x84, 0xdf, 0x29,
	0xe9, 0x2b, 0xf4, 0xcf, 0x44, 0xae, 0xe2, 0x62, 0x26, 0x43, 0xa6, 0xf9, 0xfd, 0x04, 0x21, 0x38,
	0x21, 0xd3, 0xcc, 0xc8, 0x71, 0xa9, 0x89, 0x09, 0xc2, 0xa0, 0x09, 0x9c, 0x49, 0xf2, 0xd3, 0x02,
	0x58, 0x5a, 0x76, 0xae, 0x79, 0x82, 0x43, 0x38, 0xc8, 0x65, 0xa6, 0x15, 0x67, 0x89, 0xe1, 0x39,
	0xa0, 0xeb, 0xbc, 0x36, 0x63, 0xa7, 0x3e, 0x23, 0x0e, 0xc0, 0x0e, 0x59, 0x71, 0x3b, 0x78, 0x19,
	0x96, 0xe4, 0x57, 0x22, 0x57, 0x9e, 0xe3, 0x5b, 0xa3, 0x43, 0x6a, 0x62, 0xf4, 0xe0, 0x41, 0xca,
	0xf5, 0x22, 0x16, 0x3f, 0xbc, 0xae, 0x19, 0x60, 0x95, 0x92, 0x05, 0xb8, 0x2b, 0x8f, 0x8c, 0x06,
	0x04, 0x47, 0x17, 0x92, 0x1b, 0xfe, 0x2e, 0x35, 0xf1, 0x3f, 0x70, 0xd7, 0x78, 0x9c, 0x26, 0xcf,
	0x6f, 0x0b, 0x0e, 0x97, 0xf3, 0x4f, 0xf3, 0x24, 0x61, 0xaa, 0xc0, 0x63, 0xe8, 0x66, 0x9a, 0x29,
	0x6d, 0xa8, 0x6c, 0xba, 0x4c, 0x4a, 0xb3, 0x53, 0x7e, 0xa3, 0xa7, 0xe6, 0xa6, 0x63, 0x6e, 0xaa,
	0x03, 0xfc, 0x00, 0x10, 0xac, 0xfd, 0xf2, 0x6c, 0xdf, 0x1e, 0x3d, 0x9c, 0x3c, 0x1b, 0x6f, 0xbc,
	0xf2, 0x71, 0x65, 0x29, 0xad, 0x95, 0xe3, 0x09, 0xb8, 0xb2, 0x36, 0xaa, 0xe7, 0x98, 0xf6, 0x17,
	0x5b, 0xed, 0x75, 0x3f, 0x68, 0xa3, 0x85, 0x9c, 0xc1, 0xf1, 0x17, 0x7e, 0xa3, 0x4f, 0x52, 0x16,
	0x17, 0x59, 0x94, 0x19, 0x51, 0xf7, 0x7a, 0x22, 0xe4, 0x2d, 0x3c, 0x69, 0x41, 0xca, 0x64, 0xbb,
	0x2d, 0x93, 0x5f, 0x36, 0x3c, 0xfe, 0x24, 0xd4, 0xe9, 0x4a, 0xe7, 0x94, 0xab, 0xeb, 0x28, 0xe0,
	0x38, 0x03, 0xb7, 0xbe, 0x73, 0xe8, 0xdf, 0x61, 0xc6, 0x7a, 0xbd, 0x86, 0x2f, 0x77, 0x54, 0x64,
	0x92, 0xec, 0xe1, 0x25, 0x3c, 0x6a, 0x6e, 0x0e, 0x92, 0x3b, 0x6d, 0xaa, 0xa0, 0x5f, 0xed, 0xac,
	0x31, 0xe0, 0x33, 0x70, 0xeb, 0x9b, 0xd0, 0xa2, 0x79, 0x63, 0x03, 0x5b, 0x34, 0x6f, 0xad, 0xd2,
	0x1e, 0x86, 0x70, 0xb4, 0xe5, 0x28, 0xbe, 0xde, 0xea, 0x6c, 0xfb, 0x7e, 0xc3, 0x37, 0x7f, 0x53,
	0x56, 0xb2, 0xcc, 0xf7, 0xcd, 0x9f, 0xf5, 0xfd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x22,
	0x72, 0x50, 0x66, 0x05, 0x00, 0x00,
}
