create table IF NOT EXISTS FILE(
    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    HASH STRING(30) NOT NULL,
    -- HASH STRING(30) NOT NULL PRIMARY KEY, 
    TYPE STRING(64),
    ENCRYPT_KEY BYTES,
    CREATION TIMESTAMPTZ NOT NULL,
    LAST_MODIFIED TIMESTAMPTZ NOT NULL,
    ACTIVE BOOL NOT NULL DEFAULT true,
    REMOVED BOOL NOT NULL DEFAULT false,
    SIZE INT NOT NULL,
    DATA BYTES DEFAULT NULL,
    REF_COUNT INT DEFAULT 1,
    PARTITION_COUNT INT DEFAULT 0,
    BLOCKS STRING[] DEFAULT NULL,
    DONE BOOL DEFAULT false,
    STORE_VOLUME INT DEFAULT 0,
    CREATOR_NODE_ID STRING(30) NOT NULL,
    SHARE BOOL DEFAULT true,
    PRIVATE BOOL DEFAULT false,
    INVALID BOOL DEFAULT false,
    INDEX FILE_HASH(HASH),
    UNIQUE (HASH,CREATOR_NODE_ID,PRIVATE)
);

create table IF NOT EXISTS FILE_OWNER(
    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    REMOVED BOOL NOT NULL DEFAULT false,
    CREATION TIMESTAMPTZ NOT NULL,
    LAST_MODIFIED TIMESTAMPTZ NOT NULL,
    NODE_ID STRING(30) NOT NULL REFERENCES CLIENT (NODE_ID),
    FOLDER BOOL NOT NULL DEFAULT false,
    NAME STRING(300) NOT NULL,
    SPACE_NO INT NOT NULL,
    TYPE STRING(64),
    PARENT_ID UUID DEFAULT NULL, 
    MOD_TIME TIMESTAMPTZ NOT NULL,
    HASH STRING(30) DEFAULT NULL,
    SIZE INT NOT NULL DEFAULT 0,
    INDEX FILE_OWNER_NAME(NAME),
    INDEX FILE_OWNER_PARENT_ID(PARENT_ID),
    INDEX FILE_OWNER_MOD_TIME(MOD_TIME),
    INDEX FILE_OWNER_SIZE(SIZE)
);
ALTER TABLE FILE_OWNER ADD CONSTRAINT PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES FILE_OWNER (ID);

create table IF NOT EXISTS FILE_VERSION(
    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    CREATION TIMESTAMPTZ NOT NULL,
    OWNER_ID UUID NOT NULL REFERENCES FILE_OWNER (ID),
    NODE_ID STRING(30) NOT NULL REFERENCES CLIENT (NODE_ID),
    HASH STRING(30) NOT NULL,
    TYPE STRING(64),
    UNIQUE (OWNER_ID, HASH)
);

create table IF NOT EXISTS BLOCK(
    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    HASH STRING(30) NOT NULL,
    SIZE INT NOT NULL,
    FILE_ID UUID NOT NULL REFERENCES FILE (ID),
    CREATION TIMESTAMPTZ NOT NULL,
    REMOVE_TIME TIMESTAMPTZ DEFAULT NULL,
    REMOVED BOOL NOT NULL DEFAULT false,
    PROVIDER_ID STRING(30) NOT NULL REFERENCES PROVIDER (NODE_ID),
    UNIQUE (FILE_ID,HASH,PROVIDER_ID)
);

create table IF NOT EXISTS NA_RECORD(
    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    PROVIDER_ID STRING(30) NOT NULL REFERENCES PROVIDER (NODE_ID),
    CHECK_START TIMESTAMPTZ NOT NULL,
    CHECK_END TIMESTAMPTZ NOT NULL
);

create table IF NOT EXISTS CHECK_AVAIL_RECORD(
    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    PROVIDER_ID STRING(30) NOT NULL REFERENCES PROVIDER (NODE_ID),
    CHECK_TIME TIMESTAMPTZ NOT NULL,
    LATENCY_NS INT NOT NULL,
    TOTAL_FREE_VOLUME INT NOT NULL,
    AVAIL_FILE_SIZE INT NOT NULL,
    CHECK_FROM STRING(30) NOT NULL
);

CREATE INDEX CHECK_TIME ON CHECK_AVAIL_RECORD (CHECK_TIME);

create table KV_STORE(
    NAME varchar(64) not null,
    INT_VAL bigint default null,
    STR_VAL varchar(255) default null,
    primary key(NAME)
);

create table IF NOT EXISTS DAILY_NA(
    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    CREATION TIMESTAMPTZ NOT NULL,
    PROVIDER_ID STRING(30) NOT NULL REFERENCES PROVIDER (NODE_ID),
    DAY DATE NOT NULL,
    START_TIME TIMESTAMPTZ NOT NULL,
    END_TIME TIMESTAMPTZ NOT NULL,
    UNIQUE (PROVIDER_ID,DAY,START_TIME,END_TIME)
);

CREATE INDEX DAY ON DAILY_NA (DAY);
