// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	upload.proto

It has these top-level messages:
	UploadReq
	UploadResp
	DownloadReq
	DownloadResp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadReq struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UploadReq) Reset()                    { *m = UploadReq{} }
func (m *UploadReq) String() string            { return proto.CompactTextString(m) }
func (*UploadReq) ProtoMessage()               {}
func (*UploadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UploadReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UploadResp struct {
}

func (m *UploadResp) Reset()                    { *m = UploadResp{} }
func (m *UploadResp) String() string            { return proto.CompactTextString(m) }
func (*UploadResp) ProtoMessage()               {}
func (*UploadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DownloadReq struct {
	BatchSize uint32 `protobuf:"varint,1,opt,name=batchSize" json:"batchSize,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *DownloadReq) Reset()                    { *m = DownloadReq{} }
func (m *DownloadReq) String() string            { return proto.CompactTextString(m) }
func (*DownloadReq) ProtoMessage()               {}
func (*DownloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DownloadReq) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *DownloadReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DownloadResp struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DownloadResp) Reset()                    { *m = DownloadResp{} }
func (m *DownloadResp) String() string            { return proto.CompactTextString(m) }
func (*DownloadResp) ProtoMessage()               {}
func (*DownloadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DownloadResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*UploadReq)(nil), "pb.UploadReq")
	proto.RegisterType((*UploadResp)(nil), "pb.UploadResp")
	proto.RegisterType((*DownloadReq)(nil), "pb.DownloadReq")
	proto.RegisterType((*DownloadResp)(nil), "pb.DownloadResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UploadService service

type UploadServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (UploadService_UploadClient, error)
	Download(ctx context.Context, in *DownloadReq, opts ...grpc.CallOption) (UploadService_DownloadClient, error)
}

type uploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewUploadServiceClient(cc *grpc.ClientConn) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (UploadService_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UploadService_serviceDesc.Streams[0], c.cc, "/pb.UploadService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadServiceUploadClient{stream}
	return x, nil
}

type UploadService_UploadClient interface {
	Send(*UploadReq) error
	CloseAndRecv() (*UploadResp, error)
	grpc.ClientStream
}

type uploadServiceUploadClient struct {
	grpc.ClientStream
}

func (x *uploadServiceUploadClient) Send(m *UploadReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadServiceUploadClient) CloseAndRecv() (*UploadResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uploadServiceClient) Download(ctx context.Context, in *DownloadReq, opts ...grpc.CallOption) (UploadService_DownloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UploadService_serviceDesc.Streams[1], c.cc, "/pb.UploadService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UploadService_DownloadClient interface {
	Recv() (*DownloadResp, error)
	grpc.ClientStream
}

type uploadServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *uploadServiceDownloadClient) Recv() (*DownloadResp, error) {
	m := new(DownloadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UploadService service

type UploadServiceServer interface {
	Upload(UploadService_UploadServer) error
	Download(*DownloadReq, UploadService_DownloadServer) error
}

func RegisterUploadServiceServer(s *grpc.Server, srv UploadServiceServer) {
	s.RegisterService(&_UploadService_serviceDesc, srv)
}

func _UploadService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadServiceServer).Upload(&uploadServiceUploadServer{stream})
}

type UploadService_UploadServer interface {
	SendAndClose(*UploadResp) error
	Recv() (*UploadReq, error)
	grpc.ServerStream
}

type uploadServiceUploadServer struct {
	grpc.ServerStream
}

func (x *uploadServiceUploadServer) SendAndClose(m *UploadResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadServiceUploadServer) Recv() (*UploadReq, error) {
	m := new(UploadReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UploadService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UploadServiceServer).Download(m, &uploadServiceDownloadServer{stream})
}

type UploadService_DownloadServer interface {
	Send(*DownloadResp) error
	grpc.ServerStream
}

type uploadServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *uploadServiceDownloadServer) Send(m *DownloadResp) error {
	return x.ServerStream.SendMsg(m)
}

var _UploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _UploadService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _UploadService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "upload.proto",
}

func init() { proto.RegisterFile("upload.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2d, 0xc8, 0xc9,
	0x4f, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe6, 0xe2,
	0x0c, 0x05, 0x8b, 0x05, 0xa5, 0x16, 0x0a, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x81, 0xd9, 0x20, 0xb1, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x89, 0x87, 0x8b, 0x0b, 0xa6, 0xa9, 0xb8, 0x40, 0xc9, 0x9e,
	0x8b, 0xdb, 0x25, 0xbf, 0x3c, 0x0f, 0x66, 0x88, 0x0c, 0x17, 0x67, 0x52, 0x62, 0x49, 0x72, 0x46,
	0x70, 0x66, 0x55, 0x2a, 0xd8, 0x24, 0xde, 0x20, 0x84, 0x00, 0x56, 0xe3, 0x94, 0xb8, 0x78, 0x10,
	0x06, 0x14, 0x17, 0x60, 0x73, 0x86, 0x51, 0x3e, 0x17, 0x2f, 0xc4, 0xca, 0xe0, 0xd4, 0xa2, 0xb2,
	0xcc, 0xe4, 0x54, 0x21, 0x6d, 0x2e, 0x36, 0x88, 0x80, 0x10, 0xaf, 0x5e, 0x41, 0x92, 0x1e, 0xdc,
	0x13, 0x52, 0x7c, 0xc8, 0xdc, 0xe2, 0x02, 0x25, 0x06, 0x0d, 0x46, 0x21, 0x43, 0x2e, 0x0e, 0x98,
	0x0d, 0x42, 0xfc, 0x20, 0x79, 0x24, 0x07, 0x4b, 0x09, 0xa0, 0x0a, 0x80, 0xb4, 0x18, 0x30, 0x26,
	0xb1, 0x81, 0xc3, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xef, 0xd8, 0x1f, 0x33, 0x01,
	0x00, 0x00,
}
